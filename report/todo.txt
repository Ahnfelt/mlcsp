TODO Report:
============

Abstract:
---------
Grue: Højest 10 linjer: Hvad handler rapporten om? Hvilke resultater er opnået?

Introduction:
-------------
- Is the project full implemented?
- "Forudsætninger" from the reader.
- What can the reader expect in this report
- (Motivating goal(?): Web proxy) ???

Analysis:
---------
- For each feature:
    - What does CSP do (if at all)?
    - What does the different CSP libraries do?
    - How would we want to write it in OCaml?
    - How can we write it in OCaml? If it's worse, why?
- Select:
    - Why aren't it's arguments processes like in CSP?
    - Why do we not have a time guard?
    - Why do we not implement priSelect? (is it meaningless?)
    - Why is shuffle-select sufficient?
    - Wouldn't priSelect better allow other kinds of select to be built on top?
- Processes and channels
    - Process "prototypes" are simply functions (unit -> unit).
    - Running processes are not values (just like in CSP).
    - Channels are values and can be sent over channels (unlike in CSP??? research!).
    - Parallel = spawn processes, then join them.
    - Why didn't we stick with parallel2, 3, etc?
    - (in1 ? x --> SKIP || in2 ? y --> SKIP); out ! p + q
    - Internal channels instead.
    - Show how parallel2 etc. can be implemented on top of the library.
    - Why do we have fork?
    - Why do we have parallel? (and not some other construct?)
    - Why no one2one etc. channels? Can't be checked statically in OCaml (type system).
    - Some libraries has altchannel, but all our channels can do everything.
- Minimalism
    - Only put things in the Csp module that *has* to be there.
    - Why are channels there? (integral part of Csp)
    - Why are parallel and fork there? (Fits into the CSP vocabulary? Fork?)
    - Why are channel rights there? (Maybe hard to implement outside?)
    - Why is poison there? (Maybe hard to implement outside?)
- Poison
    - Why is it interesting?
    - How should it work?
    - Why have a manual poison check (poisoned)?
    - Why can't we propagate it automatically?
    - When is it desirable to do so?
    - What does PyCSP do?
    - What could we have done? Propagate, finally, poison_list, try-catch.


Implementation:
---------------
-Global mutex (no parallelismo due to garbage collector).
-Individual condition variables.
-List of records with functions to hide type variable? Avoid high order
polymorphism.
-Mutex + condition + threads.
-Process
-Channels
-Select
-Guards
-Poison
-Identity function for rights (channel rights) + phantom types.
-Random in shuffle, argument that based on probability that all process would
be run at some point.
-With_mutex
-Read + write shorthand for select.

Test:
-----
-Amout of threads that can be spawned.
-Parallel [-] and fork.
-Guards.
-Any2any channels.
-Fibonacci with poison (Milestone I).
-WebProxy (Milestone II).
-Why haven't we made the Ising model as we mention in synopsis.
-Commsmark as in PyCSP?
-Non-blocking IO.

Conclusion:
-----------
-What we have and what we can do:
 * An implemented and tested API that works as intentioned (look at synopsis).
 * It's Small, precise and well documented.
 * We can do same kind of applications as the other CSP libraries but our is
   type-strong at compiler time. For example if our print component expects a
   string message but if the previous proccess sends an array we will not be
   able to compile and hereby execute the application. On the other hand with
   PyCSP we can have our application running for a day an just at the end when
   we need to send the string to the printer with the final result we send an
   array an the application crashes. (kig på om eksempel holder).
 * Usefull for IO-bound concurrency.
-What we don't have:
 * True parallelism in Ocaml threads, look at the french guy mail.
 * A limit on amount of user threads around ~15.000, set by ocaml for each
   application, you can run several application where each get that upperbound.
-Possible extensions:
 * Implement distribution through sockets as mentioned in synopsis, this way
   we could achieve paralelism:
   ~How would the process be started?
   ~How would the process syncronize?
   ~Avoid stop-the-world. Best case? Ok case?
- Why don't we use or extend Event? (very similar ... almost a clone). With this
project we wanted to learn how to design/implement an API. Read synopsis where
we set focus on the design of the API.

