abstract:

struktur:

Joakim:
?sammenlign med Communicating Haskell Processes, som er
?CSP-agtigt til haskell med monader. argumenter for at det
?modellen ikke passer i ocaml hvis det er tilfældet.

API design:
Joakim:
?sig klarerer hvorfor vi bruger funktioner (to suspend the
?evaluation of the processes in a CBV language)

Ramon:
?sæt funktionsnavne i \emph

Joakim:
?skriv mangel på parallelism lige ved parallel
?skriv shared state lige ved parallel og nævn at det også
kan deles ved scope.

Joakim:
?Alle processer i external choice skal eksponere deres "guard"! nævn at vores er
?tættere på CSP external choice end de andre. 

Ramon:
?skriv at man kan lave både read og write guards på den
?samme kanal i samme select, men at den ikke kommunikerer
?med sig selv. 
?vi er lidt mere over i general choice da vi kan
?sige skriv a og skriv b til den samme kanal i en select.
?på hvilken måde er vi ext og gen choice? fremhæv at det
?er lidt forskelligt fra csp fordi vi har any2any.
?i csp er kanaler altid mellem to forskellige processer.

Joakim:
?du kan faktisk godt lave polling med shuffle select og
?skip guards (well en kanal der altid har noget at læse),
?det kan tage bare længere tid end ved priSelect.

Ramon:
concurrent = samtidighedsmodellen
parallelism = samtidighed på hardwareniveau
ret parallelism næsten alle steder vi bruger det

implementation

Joakim:
skriv at vi konceptuelt gør det samme som CSP med read 
og write, idet prefixing er external choices med et valg.

ocamltest
Ramon:
nonblocking forklar referencen "brug systhreads", og fortæl
om konflikten mellem den og det vi siger, og hvorfor det
virker med user threads (hvis det gør!). skriv hvornår 
referencen er 
referencer til testkoden før detaljer i testafsnittene.

webproxy
- hvad skal den kunne
- hvorfor er det bedre at bruge csp end mutexes etc.?
- kig evt. på den web proxy der er i "use sythreads".

Ramon/Joakim:
referer til koden fra implementation?

aflever elektronisk i studieadm cc til andrzej + fysisk
kopi. vedhæft koden som zip

